pipeline {
    agent any
    triggers { githubPush() }
    options { 
        buildDiscarder(logRotator(numToKeepStr: "3")) 
        disableConcurrentBuilds()
    }
    environment {
        AWS_SECRET_MANAGER = "${APP_NAME_AWS_SECRET_MANAGER}"
        AWS_REGION = "${APP_NAME_AWS_REGION}"
        DOCKER_IMAGE_NAME = "${APP_NAME_AWS_IMAGE_NAME}"
        DOCKER_IMAGE_TAG = "${APP_NAME_AWS_IMAGE_TAG}"
        AWS_ACCOUNT_ID = "${APP_NAME_AWS_ACCOUNT_ID}"
        AWS_CREDENTIALS_ID = "my-aws-creds"
    }
    
    stages {
        stage('Update docker image') {
            when { 
                anyOf { 
                    branch 'develop'
                    branch 'production'
                }
            }
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                    credentialsId: env.AWS_CREDENTIALS_ID
                ]])
                {
                    sh "aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 272842814728.dkr.ecr.ap-south-1.amazonaws.com"
                    sh "docker build -t sample ."
                    sh "docker tag sample:latest 272842814728.dkr.ecr.ap-south-1.amazonaws.com/sample:latest"
                    sh "docker push 272842814728.dkr.ecr.ap-south-1.amazonaws.com/sample:latest"
                }
            }
        }

        stage('Update server configs for Develop') {
            when {
                branch 'develop'
            }
            environment {
                SERVER_NAME = "${APP_NAME_DEV_SERVER}"
            }
            steps {
                sh 'scp -o StrictHostKeyChecking=no $WORKSPACE/.config/docker/docker-compose-dev.yml ubuntu@${SERVER_NAME}:/home/ubuntu/${APP_NAME}/docker-compose.yml'
                sh 'scp -o StrictHostKeyChecking=no $WORKSPACE/.config/docker/.env  ubuntu@${SERVER_NAME}:/home/ubuntu/${APP_NAME}'
            }
        }

        stage('Update server configs for Production') {
            when {
                branch 'production'
            }
            environment {
                SERVER_NAME = "${APP_NAME_PROD_SERVER}"
            }
            steps {
                sh 'scp -o StrictHostKeyChecking=no $WORKSPACE/.config/docker/docker-compose-prod.yml ubuntu@${SERVER_NAME}:/home/ubuntu/${APP_NAME}/docker-compose.yml'
                sh 'scp -o StrictHostKeyChecking=no $WORKSPACE/.config/docker/.env  ubuntu@${SERVER_NAME}:/home/ubuntu/${APP_NAME}'
            }
        }        

        stage('Update server for Develop') {
            when {
                branch 'develop'
            }
            environment {
                SERVER_NAME = "${APP_NAME_DEV_SERVER}"
            }
            steps {
                sh 'ssh -o StrictHostKeyChecking=no ubuntu@${SERVER_NAME} -t "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com && docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} && cd /home/ubuntu/${APP_NAME} && docker compose up -d --force-recreate --build && docker compose exec -u 0 web python manage.py migrate --no-input && docker compose exec -u 0 web python manage.py collectstatic --no-input && docker image prune -a -f"'
                sh 'docker image prune -a -f'
            }
        }

        stage('Update server for Production') {
            when {
                branch 'production'
            }
            environment {
                SERVER_NAME = "${APP_NAME_PROD_SERVER}"
            }
            steps {
                sh 'ssh -o StrictHostKeyChecking=no ubuntu@${SERVER_NAME} -t "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com && docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} && cd /home/ubuntu/${APP_NAME} && docker compose up -d --force-recreate --build && docker compose exec -u 0 web python manage.py migrate --no-input && docker compose exec -u 0 web python manage.py collectstatic --no-input && docker image prune -a -f"'
                sh 'docker image prune -a -f'
            }
        }  
    }
    post {
        success { 
            echo "APP_NAME ${env.BRANCH_NAME.toUpperCase()} SERVER UPDATE SUCCESSFUL: Job '(<${env.BUILD_URL}|Open>)'"
        }
        failure { 
            echo "APP_NAME ${env.BRANCH_NAME.toUpperCase()} SERVER UPDATE FAILED: Job '(<${env.BUILD_URL}|Open>)'"
        }
    }
}
