pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = "${APP_NAME_AWS_ACCOUNT_ID}"
        AWS_SECRET_MANAGER = "${APP_NAME_AWS_SECRET_MANAGER}"
        SERVER_NAME = "${APP_NAME_SERVER}"
        AWS_REGION = "${APP_NAME_AWS_REGION}"
        DOCKER_IMAGE_NAME = "${APP_NAME_AWS_IMAGE_NAME}"
        DOCKER_IMAGE_TAG = "${APP_NAME_AWS_IMAGE_TAG}-${BUILD_NUMBER}"
        SONAR_SCANNER_HOME = tool 'SonarQubeScanner' 
    }

    stages {
        stage('SonarQube Analysis') {
            when {
                branch 'main'
            }
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    script {
                        sh """
                            ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=${DOCKER_IMAGE_NAME} \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarqube.becomap.com/ \
                            -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        } 

        stage('Environment Setup') {
            when {
                branch 'main'
            }
            steps {
                script {
                    sh 'mkdir -p $WORKSPACE/.config/docker'
                    sh """
                        aws secretsmanager get-secret-value --secret-id ${AWS_SECRET_MANAGER} --query SecretString --output text --region ${AWS_REGION} | \
                        jq -r 'to_entries[] | "\\(.key)=\\(.value|tostring)"' > $WORKSPACE/.config/docker/.env
                    """
                }
            }
        }

        stage('Login and Push to ECR') {
            when {
                branch 'main'
            }
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                    credentialsId: 'aws-creds'
                ]]) {
                    script {
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                        sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                        sh "docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                        sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                    }
                }
            }
        }
    }
}
